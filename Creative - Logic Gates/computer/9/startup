-- +-----------------------+
-- | Made by MyNameIsTrez. +---------------------------------------+
-- | Use 'pastebin get QdCW0kgV startup' to download this program. +---------------------------------------------------------+
-- | 1. Place a modem on top of the computer by crouching, this can be changed to any side by changing 'rednet.open("top")'. |
-- | 2. Make sure to change the 'targetComputerID' variable to the ID of the requestingMain computer. +----------------------+
-- | 2. You can change 'outputSide = "back"' to any other direction. +--------------------------------+
-- +-----------------------------------------------------------------+

-- Editable variables.
targetComputerID = 8
outputSide = "back"

-- The item names.
itemList = {
"cobblestone",
"oak planks",
"oak log",
"glass",
"block of lapis lazuli",
"block of gold",
"block of iron",
"block of diamond",
"stone bricks",
"diamond",
"iron ingot",
"gold ingot",
"lapis lazuli",
"redstone dust",
"steak",
"snow"
}

function loadAPIs()
  -- Makes a table of the IDs and names of the APIs to load.
  local APIs = {
    {id = "U0dsahkX", name = "dd"}
  }

  for i = 1, #APIs do
    -- Delete the old APIs to make room for
    -- a potential more up-to-date version on Pastebin.
    
    -- This returns no error if this API doesn't exist on the computer yet.
    fs.delete(APIs[i].name)

    shell.run("pastebin", "get", APIs[i].id, APIs[i].name)
    os.loadAPI(APIs[i].name)
  end
end
loadAPIs()

local detectedModem = dd.detectDevice('modem')
if (detectedModem) then
  rednet.open(detectedModem)
else
  term.clear()
  term.setCursorPos(1, 1)
  error('You forgot to add a modem!')
end

-- Initializes the monitor, if it is available.
local detectedMonitor = dd.detectDevice('monitor')
local monitor = nil
if (detectedMonitor) then
  monitor = peripheral.wrap(detectedMonitor)
  monitor.setTextScale(3)
end

-- All the color names.
colorList = {
  colors.white, colors.orange, colors.magenta,
  colors.lightBlue, colors.yellow, colors.lime,
  colors.pink, colors.gray, colors.lightGray,
  colors.cyan, colors.purple, colors.blue,
  colors.brown, colors.green, colors.red,
  colors.black
}

function main()
 while true do
  -- Make the terminal ready for item names.
  term.clear()
  term.setCursorPos(1, 1)

  -- Set the item counter to 0.
  j = 0
  -- For every item.
  for k = 1, #itemList do
   -- Display the item names.
   print(itemList[k])
   
   -- Count the amount of items.
   if string.len(itemList[k]) > 0 then
    j = j + 1
   end
  end

  -- Write the amount of item slots left to the monitor.
  if (monitor) then
    monitor.write(tostring(16 - j))
  end
  
  bCable = 0
  color = 0
  step = 0
  tempVar = 1
  
  senderId, item, protocol = rednet.receive()
  
  senderId, stacks, protocol = rednet.receive()
  stacks = tonumber(stacks)
  
  for j = 1, 16 do
   if item == itemList[j] then
    color = colorList[j]
   end
  end
  
  if color == 0 then
   main()
  end
  
  for i = 1, stacks do   
   if type(color) ~= "nil" and tempVar == 1 then
    rednet.send(targetComputerID, "working")
    tempVar = 0
   end
   
   rs.setBundledOutput(outputSide, colors.combine(0, color))
   sleep(0.1)
   rs.setBundledOutput(outputSide, 0)
   sleep(0.3)
 
   step = tostring(i)
   rednet.send(targetComputerID, step)
  end
  rednet.send(targetComputerID, "restart")
 end
end

main()
